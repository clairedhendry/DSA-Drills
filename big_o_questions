1)  a) 0(1) - constant time - essentially finding a single index in an array
    b) 0(n) - linear time - essentially a for loop, asking each individual until the answer is found

2) 0(1) - constant time - only one input value and 1 iteration, doesn't matter what input is

3) polynomial time - 0(n^2) - nested for loops - input size is raised to the k power

4) linear 0(n) - as input size increases, time increases because only dependent on size of input

5) 0(n) - linear - as input size increases, time does too - basically one 'tick' per iteration - 

6) polynomial time? 0(n^k) - again, nested for loops - the more, the more time it takes

7) fibonacci sequence - linear? given a larger input, still running one computation per cycle

8) logarithmic 0(log(n)) - constantly breaking up input by half, evaluating and resetting 

function efficientSearch(array, item) {
    let minIndex = 0;
    let maxIndex = array.length - 1;
    let currentIndex;
    let currentElement;

    while (minIndex <= maxIndex) {
        currentIndex = Math.floor((minIndex + maxIndex) / 2);
        currentElement = array[currentIndex];

        if (currentElement < item) {
            minIndex = currentIndex + 1;
        }
        else if (currentElement > item) {
            maxIndex = currentIndex - 1;
        }
        else {
            return currentIndex;
        }
    }
    return -1;
}

9) constant time 0(1) - doesn't matter the size of the array, will find at the index specified

10) linear? - it seems like, again, doesn't matter what the input size is, there is one computation per input number

11) const tower = function(num) {
    let RodA = [];
    let RodB = [];
    let RodC = [];

    for (i = 0; i < num; i++) {
        RodA.push(i)
    };

    if(RodA[0] < RodB[0])) {
        RodB.push(RodA[0])
    }
    if(RodB[0] < )
}

var hanoi = function(disc,src,aux,dst) {
    if (disc > 0) {
        hanoi(disc - 1,src,dst,aux);
        document.write("Move disc " + disc + " from " + src + " to " + dst + "<br />");
        hanoi(disc - 1,aux,src,dst);
    }
};

hanoi(3,"src","aux","dst");


12) iterative counting sheep -
const iterativeSheep = function(num) {
    let number = num 
    let ticks = 0
    for ( i = 0; i < num + 1; i++) {
        
        if( number === 0 ) {
            return `All sheep jumped over the fence.`
        } 
        
        console.log(`${number}: Another sheep jumps the fence, `)
        console.log(ticks)
        number = number - 1;
        ticks++;
        
    }

}

const iterativePowerCalculator = function(base, exponent) {
    if( exponent <=0 ) {
        return `exponent should be >= 0`
    }
    return base**exponent

}


const otherReverseString = function(str) {
    return str.split('').reverse().join('')
}

const iterativeTriangularNumber = function(n) {
    let number = 0
    for(i = 1; i < n+1; i++) {
        number = number + i;
    }
    return number;
}

13) 



